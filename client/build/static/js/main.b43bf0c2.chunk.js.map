{"version":3,"sources":["App.js","serviceWorker.js","reducers/SearchReducer.js","reducers/index.js","store.js","index.js","constants/actionConstants.js"],"names":["Loading","react_default","a","createElement","Search","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","Details","NoMatch","App","BrowserRouter","className","Switch","Route","exact","path","component","Component","Boolean","window","location","hostname","match","searchReducer","state","arguments","length","undefined","search_term","searching","search_result","search_total_result","message","details","action","type","SEARCH_TERM","Object","objectSpread","payload","SEARCH_RESULT","parseInt","total","DETAILS","combineReducers","middlewares","ReduxThunk","createStoreWithMiddleware","applyMiddleware","apply","createStore","rootReducer","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","KEY","API_URL","console","log","process"],"mappings":"yRAIMA,EAAU,kBAAMC,EAAAC,EAAAC,cAAA,0BAChBC,EAASC,IAAS,CACtBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,IAGLc,EAAUT,IAAS,CACvBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,IAILe,EAAUV,IAAS,CACvBC,OAAQ,kBAAMG,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,IAoBIgB,mLAfX,OACDf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACGhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,aACjBjB,EAAAC,EAAAC,cAAA,iCACIF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACJlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjCH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOE,KAAK,eAAeC,UAAWT,IACtCb,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOG,UAAWR,cATJS,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oGCqBSC,EArCO,WAOR,IAPSC,EAOTC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAPiB,CAC9BG,YAAa,KACbC,WAAW,EACXC,cAAe,KACfC,oBAAqB,KACrBC,QAAS,KACTC,QAAS,MACPC,EAAWT,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACb,OAAQO,EAAOC,MACd,KAAKC,IACJZ,EAAKa,OAAAC,EAAA,EAAAD,CAAA,GACDb,EADC,CAEJI,YAAaM,EAAOK,UAErB,MACD,KAAKC,IACJhB,EAAKa,OAAAC,EAAA,EAAAD,CAAA,GACDb,EADC,CAEJM,cAAeI,EAAOK,QACtBR,oBAAqBU,SAASP,EAAOQ,MAAO,IAC5Cb,UAAWK,EAAOL,UAClBG,QAASE,EAAOF,UAEjB,MACD,KAAKW,IACJnB,EAAKa,OAAAC,EAAA,EAAAD,CAAA,GACDb,EADC,CAEJS,QAASC,EAAOK,UAOnB,OAAOf,GCjCOoB,cAAgB,CAC9BrB,kBCAYsB,EAAc,CAACC,KAEbC,EADmBC,IAAeC,WAAf,EAAmBJ,EAAnBG,CAAgCE,IACnDH,CAA0BI,GCGzCC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAUC,MAAOA,GAC7B7D,EAAAC,EAAAC,cAAC4D,EAAD,OACaC,SAASC,eAAe,SJsHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC,+CKlInB7D,EAAA8D,EAAAC,EAAA,sBAAAzB,IAAAtC,EAAA8D,EAAAC,EAAA,sBAAAtB,IAAAzC,EAAA8D,EAAAC,EAAA,sBAAA7B,IAAAlC,EAAA8D,EAAAC,EAAA,sBAAAC,IAAAhE,EAAA8D,EAAAC,EAAA,sBAAAE,IAAO,IAAM3B,EAAgB,gBAChBG,EAAU,UACVP,EAAc,cACd8B,EAAM,yBACNC,EAA2D,IAExEC,QAAQC,IAAI,QAASC,cACrBF,QAAQC,IAAI,YAAaF","file":"static/js/main.b43bf0c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Loadable from 'react-loadable';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nconst Loading = () => <div>Loading...</div>;\r\nconst Search = Loadable({\r\n  loader: () => import('./components/Search.js'),\r\n  loading: Loading,\r\n});\r\n\r\nconst Details = Loadable({\r\n  loader: () => import('./components/Details.js'),\r\n  loading: Loading,\r\n});\r\n\r\n\r\nconst NoMatch = Loadable({\r\n  loader: () => import('./components/NoMatch.js'),\r\n  loading: Loading,\r\n});\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n\t  <Router>\r\n      <div className=\"container\">\r\n\t  \t<h1>Project Book Search</h1>\r\n        <Switch>\r\n\t\t  <Route exact path=\"/\" component={Search}/>\r\n\t\t  <Route path=\"/details/:id\" component={Details}/>\r\n\t\t  <Route component={NoMatch} />\r\n\t\t</Switch>\r\n      </div>\r\n\t  </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {SEARCH_RESULT, DETAILS, SEARCH_TERM} from '../constants/actionConstants';\r\n\r\nconst searchReducer = (state = {\r\n\tsearch_term: null,\r\n\tsearching: false,\r\n\tsearch_result: null,\r\n\tsearch_total_result: null,\r\n\tmessage: null,\r\n\tdetails: null\r\n}, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SEARCH_TERM:\r\n\t\t\tstate = {\r\n\t\t\t\t...state,\r\n\t\t\t\tsearch_term: action.payload\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase SEARCH_RESULT:\r\n\t\t\tstate = {\r\n\t\t\t\t...state,\r\n\t\t\t\tsearch_result: action.payload,\r\n\t\t\t\tsearch_total_result: parseInt(action.total, 10),\r\n\t\t\t\tsearching: action.searching,\r\n\t\t\t\tmessage: action.message\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase DETAILS:\r\n\t\t\tstate = {\r\n\t\t\t\t...state,\r\n\t\t\t\tdetails: action.payload\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn state;\r\n};\r\n\r\nexport default searchReducer;","import {combineReducers} from 'redux';\r\nimport searchReducer from './SearchReducer';\r\n\r\nexport default combineReducers({\r\n\tsearchReducer\t\t\t\t\t\t  \r\n});","import {createStore, applyMiddleware} from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nexport const middlewares = [ReduxThunk];\r\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\r\nexport default createStoreWithMiddleware(rootReducer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport store from './store.js';\r\n\r\nReactDOM.render(<Provider store={store}>\r\n\t\t\t\t<App />\r\n\t\t\t\t</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","\r\nexport const SEARCH_RESULT = 'SEARCH_RESULT';\r\nexport const DETAILS = 'DETAILS';\r\nexport const SEARCH_TERM = 'SEARCH_TERM';\r\nexport const KEY = '5PlA7gmXyIm31AcNfINKMA';\r\nexport const API_URL = (process.env.NODE_ENV === 'development') ? '/' : '/';\r\n\r\nconsole.log('env: ', process.env.NODE_ENV);\r\nconsole.log('API_URL: ', API_URL);"],"sourceRoot":""}